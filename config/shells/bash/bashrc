# ~/.bashrc: executed by bash(1) for non-login shells.
# See /usr/share/doc/bash/examples/startup-files for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Source common shell configurations
DOTFILES_DIR="${HOME}/.dotfiles/config"
COMMON_DIR="${DOTFILES_DIR}/shells/common"

# Load common exports first (needed by other configs)
[ -f "$COMMON_DIR/exports" ] && source "$COMMON_DIR/exports"

# Load common path configuration
[ -f "$COMMON_DIR/paths" ] && source "$COMMON_DIR/paths"

# Load common functions
[ -f "$COMMON_DIR/functions" ] && source "$COMMON_DIR/functions"

# Load common aliases
[ -f "$COMMON_DIR/aliases" ] && source "$COMMON_DIR/aliases"

# Bash-specific configurations
# History settings (enhanced from common exports)
shopt -s histappend
HISTCONTROL=ignoreboth:erasedups
HISTSIZE=10000
HISTFILESIZE=20000

# Update window size after each command
shopt -s checkwinsize

# Enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Enable color support for ls
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Set prompt
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

# Powerline prompt (if available)
if command -v powerline-daemon >/dev/null 2>&1; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    if [ -f /usr/share/powerline/bindings/bash/powerline.sh ]; then
        source /usr/share/powerline/bindings/bash/powerline.sh
    elif [ -f ~/.local/lib/python*/site-packages/powerline/bindings/bash/powerline.sh ]; then
        source ~/.local/lib/python*/site-packages/powerline/bindings/bash/powerline.sh
    fi
fi

# Tool initializations (lazy loading for performance)
# NVM (Node Version Manager)
if [ -d "$NVM_DIR" ]; then
    nvm() {
        unset -f nvm
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        nvm "$@"
    }
fi

# pyenv (Python Version Manager) - lazy loading
if [ -d "$PYENV_ROOT" ]; then
    pyenv() {
        unset -f pyenv
        eval "$(command pyenv init -)"
        eval "$(command pyenv virtualenv-init -)"
        pyenv "$@"
    }
fi

# rbenv (Ruby Version Manager) - lazy loading
if [ -d "${HOME}/.rbenv" ]; then
    rbenv() {
        unset -f rbenv
        eval "$(command rbenv init -)"
        rbenv "$@"
    }
fi

# FZF key bindings
if command -v fzf >/dev/null 2>&1; then
    # Key bindings
    if [ -f /usr/share/doc/fzf/examples/key-bindings.bash ]; then
        source /usr/share/doc/fzf/examples/key-bindings.bash
    elif [ -f ~/.fzf/shell/key-bindings.bash ]; then
        source ~/.fzf/shell/key-bindings.bash
    fi
    
    # Auto-completion
    if [ -f /usr/share/doc/fzf/examples/completion.bash ]; then
        source /usr/share/doc/fzf/examples/completion.bash
    elif [ -f ~/.fzf/shell/completion.bash ]; then
        source ~/.fzf/shell/completion.bash
    fi
fi

# Load machine-specific bash configuration
MACHINE_BASHRC="${DOTFILES_DIR}/machines/current/bashrc"
if [ -f "$MACHINE_BASHRC" ]; then
    source "$MACHINE_BASHRC"
fi

# Load local bash configuration (not version controlled)
if [ -f ~/.bashrc.local ]; then
    source ~/.bashrc.local
fi

# Initialize dotfiles management command completion
if [ -f "${HOME}/.local/bin/dotfiles" ]; then
    complete -W "status sync backup restore diff add machine test secrets scripts help" dotfiles
fiexport LANG=en_CA.UTF-8
export LC_ALL=en_CA.UTF-8
