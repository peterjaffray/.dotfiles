# Common shell functions that work across bash and zsh
# These functions provide useful utilities for daily development work

# Create directory and cd into it
mkcd() {
    if [ $# -ne 1 ]; then
        echo "Usage: mkcd <directory>"
        return 1
    fi
    mkdir -p "$1" && cd "$1"
}

# Go up N directories
up() {
    local levels=${1:-1}
    local path=""
    
    if ! [[ "$levels" =~ ^[0-9]+$ ]]; then
        echo "Usage: up [number]"
        return 1
    fi
    
    for ((i = 1; i <= levels; i++)); do
        path="../$path"
    done
    
    cd "$path" || return 1
}

# Enhanced cd with history
cd() {
    builtin cd "$@" && ls -la
}

# Find and cd to directory
cdf() {
    local dir
    if command -v fzf >/dev/null 2>&1 && command -v fd >/dev/null 2>&1; then
        dir=$(fd --type d --hidden --follow --exclude .git | fzf --preview 'tree -C {} | head -200')
    else
        dir=$(find . -type d 2>/dev/null | grep -v ".git" | head -20)
    fi
    
    if [ -n "$dir" ]; then
        cd "$dir" || return 1
    fi
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *.xz)        unxz "$1"        ;;
            *.exe)       cabextract "$1"  ;;
            *)           echo "'$1': unrecognized file compression" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create timestamped backup
backup() {
    local timestamp
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    for file in "$@"; do
        if [ -e "$file" ]; then
            cp -r "$file" "${file}.backup.$timestamp"
            echo "Backed up: $file -> ${file}.backup.$timestamp"
        else
            echo "File not found: $file"
        fi
    done
}

# Quick web search
google() {
    local search_term="$*"
    local url="https://www.google.com/search?q=${search_term// /+}"
    
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$url"
    elif command -v open >/dev/null 2>&1; then
        open "$url"
    else
        echo "$url"
    fi
}

# Get public IP address
myip() {
    curl -s ifconfig.me
}

# Get local IP addresses
localip() {
    if command -v ip >/dev/null 2>&1; then
        ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1
    elif command -v ifconfig >/dev/null 2>&1; then
        ifconfig | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}'
    else
        echo "No suitable command found (ip or ifconfig)"
    fi
}

# Weather report
weather() {
    local location="${1:-}"
    curl -s "wttr.in/${location}"
}

# Process search and kill
pskill() {
    local process="$1"
    if [ -z "$process" ]; then
        echo "Usage: pskill <process_name>"
        return 1
    fi
    
    ps aux | grep -i "$process" | grep -v grep
    echo -n "Kill these processes? (y/N): "
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        ps aux | grep -i "$process" | grep -v grep | awk '{print $2}' | xargs kill -9
    fi
}

# Quick HTTP server
serve() {
    local port="${1:-8000}"
    local directory="${2:-.}"
    
    echo "Serving $directory on port $port"
    
    if command -v python3 >/dev/null 2>&1; then
        python3 -m http.server "$port" --directory "$directory"
    elif command -v python >/dev/null 2>&1; then
        cd "$directory" && python -m SimpleHTTPServer "$port"
    elif command -v node >/dev/null 2>&1; then
        npx http-server "$directory" -p "$port"
    else
        echo "No suitable HTTP server found (python3, python, or node)"
    fi
}

# Git helpers
gclone() {
    local repo="$1"
    if [[ "$repo" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$ ]]; then
        repo="https://github.com/$repo.git"
    fi
    git clone "$repo"
}

# Create and switch to new git branch
gnb() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo "Usage: gnb <branch_name>"
        return 1
    fi
    git checkout -b "$branch_name"
}

# Docker helpers
drun() {
    docker run --rm -it "$@"
}

dexec() {
    local container="$1"
    shift
    docker exec -it "$container" "${@:-bash}"
}

# Kubernetes helpers
kexec() {
    local pod="$1"
    shift
    kubectl exec -it "$pod" -- "${@:-sh}"
}

# System info
sysinfo() {
    echo "System Information:"
    echo "=================="
    echo "OS: $(uname -s)"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "Hostname: $(hostname)"
    echo "Uptime: $(uptime | cut -d',' -f1 | cut -d' ' -f4-)"
    echo "Shell: $SHELL"
    echo "Terminal: $TERM"
    
    if [ -f /etc/os-release ]; then
        echo "Distribution: $(grep PRETTY_NAME /etc/os-release | cut -d'=' -f2 | tr -d '"')"
    fi
    
    if command -v free >/dev/null 2>&1; then
        echo "Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
    fi
    
    echo "Disk Usage:"
    df -h / 2>/dev/null | tail -1 | awk '{print "  Root: " $3 "/" $2 " (" $5 ")"}'
}

# Reload shell configuration
reload() {
    case "$0" in
        *bash*)
            source ~/.bashrc
            echo "Bash configuration reloaded"
            ;;
        *zsh*)
            source ~/.zshrc
            echo "Zsh configuration reloaded"
            ;;
        *)
            echo "Unknown shell, please reload manually"
            ;;
    esac
}

# Find large files
findlarge() {
    local size="${1:-100M}"
    local path="${2:-.}"
    
    echo "Finding files larger than $size in $path..."
    find "$path" -type f -size "+$size" -exec ls -lh {} \; 2>/dev/null | sort -k5 -h
}

# Find recent files
recent() {
    local days="${1:-1}"
    local path="${2:-.}"
    
    echo "Files modified in the last $days days:"
    find "$path" -type f -mtime -"$days" -exec ls -la {} \; 2>/dev/null | sort
}

# Quick notes
note() {
    local note_dir="${HOME}/.notes"
    local note_file="${note_dir}/$(date +%Y-%m-%d).md"
    
    mkdir -p "$note_dir"
    
    if [ $# -eq 0 ]; then
        # Open today's note file
        ${EDITOR:-vim} "$note_file"
    else
        # Add note with timestamp
        echo "$(date '+%H:%M:%S') - $*" >> "$note_file"
        echo "Note added to $note_file"
    fi
}

# Quick calculation
calc() {
    if command -v bc >/dev/null 2>&1; then
        echo "$*" | bc -l
    else
        echo "bc not found, using basic arithmetic"
        echo $(( $* ))
    fi
}

# URL encode/decode
urlencode() {
    python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))"
}

urldecode() {
    python3 -c "import urllib.parse; print(urllib.parse.unquote('$1'))"
}

# Load machine-specific functions
MACHINE_FUNCTIONS="${HOME}/.config/dotfiles/machines/current/functions"
if [ -f "$MACHINE_FUNCTIONS" ]; then
    source "$MACHINE_FUNCTIONS"
fi