#!/bin/bash
# Credential Sync Script
# Syncs credentials from another machine using rsync
# Never commits credentials to git - keeps them separate

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script info
SCRIPT_NAME="$(basename "$0")"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Credential paths mapping
declare -A CREDENTIAL_PATHS=(
    # AWS
    ["aws_config"]="$HOME/.aws/config"
    ["aws_credentials"]="$HOME/.aws/credentials"

    # Google Cloud
    ["gcloud_config"]="$HOME/.config/gcloud"

    # SSH Keys
    ["ssh_keys"]="$HOME/.ssh"

    # GPG Keys
    ["gpg_keys"]="$HOME/.gnupg"

    # Claude Code
    ["claude_settings"]="$HOME/.claude/settings.local.json"
    ["claude_api_key"]="$HOME/.claude/.api_key"

    # Git credentials
    ["git_credentials"]="$HOME/.git-credentials"
    ["gitconfig_local"]="$HOME/.gitconfig.local"

    # NPM/Node
    ["npmrc"]="$HOME/.npmrc"

    # Docker
    ["docker_config"]="$HOME/.docker/config.json"

    # Kubernetes
    ["kube_config"]="$HOME/.kube/config"

    # Environment files
    ["env_files"]="$HOME/.env.local"

    # GitHub CLI
    ["gh_config"]="$HOME/.config/gh"

    # Terraform
    ["terraform_rc"]="$HOME/.terraformrc"

    # Ansible
    ["ansible_vault"]="$HOME/.ansible/vault_pass.txt"
)

# Usage
usage() {
    cat << EOF
${BLUE}Credential Sync Script${NC}

Securely syncs credentials from another machine using rsync.

${YELLOW}Usage:${NC}
    $SCRIPT_NAME sync <user@host> [options]    Sync all credentials from remote machine
    $SCRIPT_NAME pull <user@host> [options]    Pull specific credentials
    $SCRIPT_NAME list                           List all managed credential paths
    $SCRIPT_NAME backup                         Backup current credentials locally
    $SCRIPT_NAME restore <backup-dir>          Restore credentials from backup

${YELLOW}Options:${NC}
    -s, --specific <type>    Sync only specific credential type
    -d, --dry-run           Show what would be synced without doing it
    -v, --verbose           Verbose output
    -b, --backup            Create backup before syncing
    -h, --help              Show this help message

${YELLOW}Credential Types:${NC}
    aws         AWS credentials and config
    gcloud      Google Cloud configuration
    ssh         SSH keys and config
    gpg         GPG keys
    claude      Claude Code settings and API keys
    git         Git credentials and local config
    npm         NPM configuration
    docker      Docker configuration
    kube        Kubernetes config
    github      GitHub CLI config
    all         All credentials (default)

${YELLOW}Examples:${NC}
    # Sync all credentials from remote machine
    $SCRIPT_NAME sync user@remote-host

    # Sync only AWS credentials
    $SCRIPT_NAME sync user@remote-host --specific aws

    # Dry run to see what would be synced
    $SCRIPT_NAME sync user@remote-host --dry-run

    # Backup current credentials
    $SCRIPT_NAME backup

${YELLOW}Security Notes:${NC}
    • Credentials are NEVER committed to git
    • Always use SSH keys for authentication
    • Consider using --dry-run first
    • Backups are stored in ~/.credential-backups/

EOF
}

# Logging functions
log() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

# List managed credential paths
list_credentials() {
    echo -e "${BLUE}Managed Credential Paths:${NC}"
    echo
    for key in "${!CREDENTIAL_PATHS[@]}"; do
        path="${CREDENTIAL_PATHS[$key]}"
        if [ -e "$path" ]; then
            echo -e "  ${GREEN}✓${NC} ${CYAN}$key${NC}: $path"
        else
            echo -e "  ${RED}✗${NC} ${CYAN}$key${NC}: $path (not found)"
        fi
    done
}

# Backup credentials
backup_credentials() {
    local backup_dir="$HOME/.credential-backups/$(date +%Y%m%d_%H%M%S)"

    log "Creating backup at: $backup_dir"
    mkdir -p "$backup_dir"

    for key in "${!CREDENTIAL_PATHS[@]}"; do
        local src="${CREDENTIAL_PATHS[$key]}"
        if [ -e "$src" ]; then
            local dest_dir="$backup_dir/$(dirname "${src#$HOME/}")"
            mkdir -p "$dest_dir"

            if [ -d "$src" ]; then
                cp -r "$src" "$dest_dir/" 2>/dev/null && \
                    echo -e "  ${GREEN}✓${NC} Backed up $key" || \
                    echo -e "  ${RED}✗${NC} Failed to backup $key"
            else
                cp "$src" "$dest_dir/" 2>/dev/null && \
                    echo -e "  ${GREEN}✓${NC} Backed up $key" || \
                    echo -e "  ${RED}✗${NC} Failed to backup $key"
            fi
        fi
    done

    success "Backup completed at: $backup_dir"
}

# Restore credentials from backup
restore_credentials() {
    local backup_dir="$1"

    if [ ! -d "$backup_dir" ]; then
        error "Backup directory not found: $backup_dir"
        return 1
    fi

    log "Restoring from: $backup_dir"

    # Restore files
    cp -r "$backup_dir"/* "$HOME/" 2>/dev/null

    success "Credentials restored from backup"
}

# Sync specific credential type
sync_specific() {
    local remote="$1"
    local cred_type="$2"
    local dry_run="$3"
    local verbose="$4"

    local rsync_opts="-az --progress"
    [ "$dry_run" = "true" ] && rsync_opts="$rsync_opts --dry-run"
    [ "$verbose" = "true" ] && rsync_opts="$rsync_opts -v"

    case "$cred_type" in
        aws)
            log "Syncing AWS credentials..."
            mkdir -p "$HOME/.aws"
            rsync $rsync_opts "$remote:.aws/" "$HOME/.aws/"
            ;;
        gcloud)
            log "Syncing Google Cloud configuration..."
            mkdir -p "$HOME/.config"
            rsync $rsync_opts "$remote:.config/gcloud/" "$HOME/.config/gcloud/"
            ;;
        ssh)
            log "Syncing SSH keys and config..."
            mkdir -p "$HOME/.ssh"
            rsync $rsync_opts "$remote:.ssh/" "$HOME/.ssh/"
            chmod 700 "$HOME/.ssh"
            chmod 600 "$HOME/.ssh/"* 2>/dev/null || true
            ;;
        gpg)
            log "Syncing GPG keys..."
            mkdir -p "$HOME/.gnupg"
            rsync $rsync_opts "$remote:.gnupg/" "$HOME/.gnupg/"
            chmod 700 "$HOME/.gnupg"
            ;;
        claude)
            log "Syncing Claude Code settings..."
            mkdir -p "$HOME/.claude"
            rsync $rsync_opts "$remote:.claude/settings.local.json" "$HOME/.claude/" 2>/dev/null || true
            rsync $rsync_opts "$remote:.claude/.api_key" "$HOME/.claude/" 2>/dev/null || true
            ;;
        git)
            log "Syncing Git credentials..."
            rsync $rsync_opts "$remote:.git-credentials" "$HOME/" 2>/dev/null || true
            rsync $rsync_opts "$remote:.gitconfig.local" "$HOME/" 2>/dev/null || true
            ;;
        npm)
            log "Syncing NPM configuration..."
            rsync $rsync_opts "$remote:.npmrc" "$HOME/" 2>/dev/null || true
            ;;
        docker)
            log "Syncing Docker configuration..."
            mkdir -p "$HOME/.docker"
            rsync $rsync_opts "$remote:.docker/config.json" "$HOME/.docker/" 2>/dev/null || true
            ;;
        kube)
            log "Syncing Kubernetes configuration..."
            mkdir -p "$HOME/.kube"
            rsync $rsync_opts "$remote:.kube/config" "$HOME/.kube/" 2>/dev/null || true
            ;;
        github)
            log "Syncing GitHub CLI configuration..."
            mkdir -p "$HOME/.config"
            rsync $rsync_opts "$remote:.config/gh/" "$HOME/.config/gh/" 2>/dev/null || true
            ;;
        all)
            log "Syncing all credentials..."
            for type in aws gcloud ssh gpg claude git npm docker kube github; do
                sync_specific "$remote" "$type" "$dry_run" "$verbose"
            done
            ;;
        *)
            error "Unknown credential type: $cred_type"
            return 1
            ;;
    esac
}

# Main sync function
sync_credentials() {
    local remote="$1"
    shift

    local specific=""
    local dry_run="false"
    local verbose="false"
    local backup="false"

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -s|--specific)
                specific="$2"
                shift 2
                ;;
            -d|--dry-run)
                dry_run="true"
                shift
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            -b|--backup)
                backup="true"
                shift
                ;;
            *)
                error "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done

    # Validate remote
    if [ -z "$remote" ]; then
        error "Remote host required"
        usage
        exit 1
    fi

    # Test SSH connection
    log "Testing connection to $remote..."
    if ! ssh -o ConnectTimeout=5 "$remote" "echo 'Connection successful'" &>/dev/null; then
        error "Cannot connect to $remote"
        error "Make sure you have SSH access and the host is reachable"
        exit 1
    fi

    # Create backup if requested
    if [ "$backup" = "true" ] && [ "$dry_run" = "false" ]; then
        log "Creating backup before sync..."
        backup_credentials
    fi

    # Sync credentials
    if [ -n "$specific" ]; then
        sync_specific "$remote" "$specific" "$dry_run" "$verbose"
    else
        sync_specific "$remote" "all" "$dry_run" "$verbose"
    fi

    if [ "$dry_run" = "false" ]; then
        success "Credential sync completed!"
        warn "Remember: Never commit credentials to git!"
    else
        log "Dry run completed - no changes made"
    fi
}

# Main command processing
case "${1:-}" in
    sync|pull)
        shift
        sync_credentials "$@"
        ;;
    list)
        list_credentials
        ;;
    backup)
        backup_credentials
        ;;
    restore)
        shift
        restore_credentials "$@"
        ;;
    -h|--help|help)
        usage
        ;;
    *)
        error "Unknown command: ${1:-}"
        usage
        exit 1
        ;;
esac