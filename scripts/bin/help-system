#!/usr/bin/env bash

# Central documentation system for dotfiles environment
# Usage: help-system [topic]

set -euo pipefail

DOTFILES_DIR="${HOME}/.dotfiles"
DOCS_DIR="${DOTFILES_DIR}/docs"
HELP_DIR="${DOCS_DIR}/help"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

show_menu() {
    while true; do
        clear
        echo -e "${CYAN}üìö Dotfiles Documentation System${NC}"
        echo ""
        echo -e "${GREEN}Select topic (press number):${NC}"
        echo -e "  ${YELLOW}1${NC} - cheatsheet  (super condensed ref)"
        echo -e "  ${YELLOW}2${NC} - tmux        (session management)"
        echo -e "  ${YELLOW}3${NC} - claude      (Claude Code commands)"
        echo -e "  ${YELLOW}4${NC} - git         (version control)"
        echo -e "  ${YELLOW}5${NC} - docker      (containers)"
        echo -e "  ${YELLOW}6${NC} - dotfiles    (system management)"
        echo -e "  ${YELLOW}7${NC} - shells      (functions & aliases)"
        echo -e "  ${YELLOW}8${NC} - shortcuts   (keyboard shortcuts)"
        echo -e "  ${YELLOW}q${NC} - quit"
        echo ""
        echo -e "${BLUE}Environment:${NC} $(detect_environment)"
        echo ""
        read -p "Enter choice [1]: " choice
        
        # Default to cheatsheet if no input
        choice=${choice:-1}
        
        case $choice in
            1) clear; show_cheatsheet_help; read -p "Press Enter to continue..." ;;
            2) clear; show_tmux_help; read -p "Press Enter to continue..." ;;
            3) clear; show_claude_help; read -p "Press Enter to continue..." ;;
            4) clear; show_git_help; read -p "Press Enter to continue..." ;;
            5) clear; show_docker_help; read -p "Press Enter to continue..." ;;
            6) clear; show_dotfiles_help; read -p "Press Enter to continue..." ;;
            7) clear; show_shells_help; read -p "Press Enter to continue..." ;;
            8) clear; show_shortcuts_help; read -p "Press Enter to continue..." ;;
            q|Q) clear; return 0 ;;
            *) echo "Invalid choice. Press Enter to try again..."; read ;;
        esac
    done
}

show_help() {
    echo -e "${CYAN}üìö Dotfiles Documentation System${NC}"
    echo ""
    echo -e "${GREEN}Available topics:${NC}"
    echo -e "  ${YELLOW}cheatsheet${NC}  - Super condensed reference (default)"
    echo -e "  ${YELLOW}tmux${NC}        - Session management & shortcuts"
    echo -e "  ${YELLOW}claude${NC}      - Claude Code commands"
    echo -e "  ${YELLOW}git${NC}         - Version control aliases"
    echo -e "  ${YELLOW}docker${NC}      - Container shortcuts"
    echo -e "  ${YELLOW}dotfiles${NC}    - System management commands"
    echo -e "  ${YELLOW}shells${NC}      - Functions, aliases & features"
    echo -e "  ${YELLOW}shortcuts${NC}   - Keyboard shortcuts"
    echo ""
    echo -e "${BLUE}Usage:${NC} ? [topic]"
    echo -e "${BLUE}Example:${NC} ? tmux"
    echo ""
}

show_cheatsheet_help() {
    echo -e "${CYAN}üìã QUICK REFERENCE CHEAT SHEET${NC}"
    echo ""
    echo -e "${GREEN}SESSION MGMT${NC}          ${GREEN}ALIAS MGMT${NC}"
    echo "t                    alias-manager add N CMD"
    echo "tmux attach          alias-manager list"
    echo "tmux new -s NAME     alias-manager check"
    echo ""
    echo -e "${GREEN}NAVIGATION${NC}           ${GREEN}GIT${NC}"
    echo "mkcd DIR             g / gs / ga / gc"
    echo "up [N] / .. / ...    gp / gl / gd / gb"
    echo "ll / la / l          gco / glog"
    echo ""
    echo -e "${GREEN}CLAUDE CODE${NC}          ${GREEN}DOCKER${NC}"
    echo "claude mcp add ...   dc / dps / di"
    echo "claude --dangerously-skip-permissions --resume"
    echo "                     k (kubectl)"
    echo ""
    echo -e "${GREEN}SYSTEM${NC}               ${GREEN}HELP${NC}"
    echo "dotfiles status      ? [topic] / h [topic]"
    echo "dotfiles doctor      extract FILE"
    echo "dotfiles sync        [i]/[n] = vim modes"
    echo ""
    echo -e "${GREEN}TMUX (C-b prefix)${NC}"
    echo "C-b c/n/p           C-b %/\"           C-b d"
    echo "create/next/prev    split v/h        detach"
    echo ""
}

show_dotfiles_help() {
    echo -e "${CYAN}üîß Dotfiles Management${NC}"
    echo ""
    echo -e "${GREEN}Core Commands:${NC}"
    echo "  ./dotfiles status       - Show current dotfiles status"
    echo "  ./dotfiles doctor       - Run system diagnostics"
    echo "  ./dotfiles sync         - Sync with remote repository"
    echo "  ./dotfiles backup       - Create backup"
    echo "  ./dotfiles clean        - Clean broken symlinks"
    echo ""
    echo -e "${GREEN}Installation:${NC}"
    echo "  ./install/install.sh                    - Interactive installation"
    echo "  ./install/install.sh --profile development --dry-run"
    echo ""
    echo -e "${GREEN}Adding Files:${NC}"
    echo "  ./dotfiles add ~/.vimrc  - Add file to dotfiles management"
    echo ""
    echo -e "${GREEN}Secret Management:${NC}"
    echo "  ./dotfiles secrets init  - Initialize secret management"
    echo "  ./dotfiles secrets add GITHUB_TOKEN"
    echo ""
    echo -e "${GREEN}Structure:${NC}"
    echo "  config/shells/          - Shell configurations"
    echo "  config/apps/            - Application configs"
    echo "  scripts/bin/            - Utility scripts"
    echo "  system/                 - Core system libraries"
    echo ""
}

show_nvim_help() {
    echo -e "${CYAN}‚úèÔ∏è  Neovim Configuration${NC}"
    echo ""
    echo -e "${GREEN}Quick Access:${NC}"
    echo "  v, vi, vim              - Open nvim"
    echo "  nvim                    - Direct nvim command"
    echo ""
    echo -e "${GREEN}Key Bindings (if configured):${NC}"
    echo "  <leader>                - Usually space or comma"
    echo "  :e filename             - Edit file"
    echo "  :w                      - Save file"
    echo "  :q                      - Quit"
    echo "  :wq or :x               - Save and quit"
    echo ""
    echo -e "${GREEN}Configuration Location:${NC}"
    echo "  ~/.config/nvim/         - Nvim configuration directory"
    echo "  ~/.dotfiles/config/apps/nvim/ - Dotfiles nvim config"
    echo ""
    echo -e "${BLUE}Note:${NC} Using AppImage: ~/nvim-linux-x86_64.appimage"
    echo ""
}

show_tmux_help() {
    echo -e "${CYAN}üñ•Ô∏è  TMUX SESSION MGMT${NC}"
    echo ""
    echo -e "${GREEN}Quick Start:${NC}"
    echo "t                       - session selector"
    echo "tmux attach             - attach session"
    echo "tmux new -s NAME        - named session"
    echo ""
    echo -e "${GREEN}Key Bindings (C-b prefix):${NC}"
    echo "C-b c / n / p           - create/next/prev window"
    echo "C-b % / \"               - split vert/horiz"
    echo "C-b d                   - detach session"
    echo "C-b [                   - scroll mode (q to quit)"
    echo ""
}

show_claude_help() {
    echo -e "${CYAN}ü§ñ CLAUDE CODE${NC}"
    echo ""
    echo -e "${GREEN}Common Commands:${NC}"
    echo "claude mcp add ...      - add MCP integration"
    echo "claude --dangerously-skip-permissions --resume"
    echo "                        - resume with skip perms"
    echo "claude --help           - show all commands"
    echo ""
    echo -e "${GREEN}Session Management:${NC}"
    echo "claude chat             - start chat session"
    echo "claude code             - code mode"
    echo ""
}

show_shells_help() {
    echo -e "${CYAN}üêö SHELLS & ALIASES${NC}"
    echo ""
    echo -e "${GREEN}Alias Management:${NC}"
    echo "alias-manager add N CMD     - add cross-shell alias"
    echo "alias-manager list          - show all w/ status"
    echo "alias-manager check         - validate aliases"
    echo ""
    echo -e "${GREEN}Functions:${NC}"
    echo "mkcd DIR                    - create & enter dir"
    echo "up [N]                      - go up N dirs"
    echo "extract FILE                - smart extraction"
    echo ""
    echo -e "${GREEN}Navigation:${NC}"
    echo ".. / ... / ....             - go up 1/2/3 dirs"
    echo "ll / la / l                 - list variants"
    echo ""
    echo -e "${GREEN}Editors:${NC}"
    echo "v / vi / vim                - nvim (with fallbacks)"
    echo ""
    echo -e "${GREEN}Vim Modes in Shell:${NC}"
    echo "[i] = insert   [n] = normal"
    echo "ESC = normal   i/a = insert"
    echo ""
}

show_git_help() {
    echo -e "${CYAN}üì¶ GIT SHORTCUTS${NC}"
    echo ""
    echo -e "${GREEN}Basic:${NC}"
    echo "g / gs / ga / gc            - git/status/add/commit"
    echo "gp / gl / gd                - push/pull/diff"
    echo ""
    echo -e "${GREEN}Branches:${NC}"
    echo "gb / gco                    - branch/checkout"
    echo "glog                        - log --graph --oneline"
    echo ""
}

show_docker_help() {
    echo -e "${CYAN}üê≥ DOCKER & CONTAINERS${NC}"
    echo ""
    echo -e "${GREEN}Docker Compose:${NC}"
    echo "dc                          - docker compose"
    echo "dc up/down/logs             - start/stop/view"
    echo ""
    echo -e "${GREEN}Docker:${NC}"
    echo "dps                         - docker ps"
    echo "di                          - docker images"
    echo ""
    echo -e "${GREEN}Kubernetes:${NC}"
    echo "k                           - kubectl (if installed)"
    echo ""
}

show_shortcuts_help() {
    echo -e "${CYAN}‚å®Ô∏è  All Shortcuts & Hotkeys${NC}"
    echo ""
    echo -e "${GREEN}Shell Prompt Shortcuts:${NC}"
    echo "  Ctrl+R                  - Search history (with fzf if available)"
    echo "  Tab                     - Auto-complete (enhanced in all shells)"
    echo "  Shift+Tab               - Reverse auto-complete"
    echo ""
    echo -e "${GREEN}FZF (if installed):${NC}"
    echo "  Ctrl+T                  - File finder"
    echo "  Ctrl+R                  - Command history search"
    echo ""
    echo -e "${GREEN}Tmux (Ctrl+b prefix):${NC}"
    echo "  See: ? tmux"
    echo ""
    echo -e "${GREEN}Git & Development:${NC}"
    echo "  See: ? git"
    echo ""
}

# Environment detection
detect_environment() {
    local env_info=""
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if grep -q Microsoft /proc/version 2>/dev/null; then
            env_info="${env_info}WSL2 "
        else
            env_info="${env_info}Linux "
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        env_info="${env_info}macOS "
    fi
    
    # Detect current shell
    env_info="${env_info}($(basename "$SHELL"))"
    
    echo "$env_info"
}

main() {
    local topic="${1:-}"
    
    if [[ -z "$topic" ]]; then
        # Check if we're in an interactive terminal
        if [[ -t 0 && -t 1 ]]; then
            show_menu
        else
            show_help
            echo -e "${BLUE}Environment:${NC} $(detect_environment)"
            echo ""
        fi
        return
    fi
    
    case "$topic" in
        "cheatsheet"|"cheat"|"ref")
            show_cheatsheet_help
            ;;
        "tmux")
            show_tmux_help
            ;;
        "claude")
            show_claude_help
            ;;
        "git")
            show_git_help
            ;;
        "docker"|"containers")
            show_docker_help
            ;;
        "dotfiles"|"dot")
            show_dotfiles_help
            ;;
        "shells"|"shell"|"bash"|"zsh"|"fish")
            show_shells_help
            ;;
        "shortcuts"|"keys"|"hotkeys")
            show_shortcuts_help
            ;;
        "nvim"|"vim"|"neovim")
            show_nvim_help
            ;;
        *)
            echo -e "${RED}Unknown topic: $topic${NC}"
            echo ""
            show_help
            return 1
            ;;
    esac
}

main "$@"