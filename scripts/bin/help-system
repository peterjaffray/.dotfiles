#!/usr/bin/env bash

# Central documentation system for dotfiles environment
# Usage: help-system [topic]

set -euo pipefail

DOTFILES_DIR="${HOME}/.dotfiles"
DOCS_DIR="${DOTFILES_DIR}/docs"
HELP_DIR="${DOCS_DIR}/help"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

show_menu() {
    while true; do
        clear
        echo -e "${CYAN}üìö Dotfiles Documentation System${NC}"
        echo ""
        echo -e "${GREEN}Select a topic:${NC}"
        echo -e "  ${YELLOW}1${NC} - dotfiles    (management commands and structure)"
        echo -e "  ${YELLOW}2${NC} - nvim        (configuration and shortcuts)"
        echo -e "  ${YELLOW}3${NC} - tmux        (shortcuts and configuration)"
        echo -e "  ${YELLOW}4${NC} - shells      (functions, aliases, and features)"
        echo -e "  ${YELLOW}5${NC} - git         (aliases and workflows)"
        echo -e "  ${YELLOW}6${NC} - docker      (container shortcuts)"
        echo -e "  ${YELLOW}7${NC} - shortcuts   (all keyboard shortcuts)"
        echo -e "  ${YELLOW}q${NC} - quit"
        echo ""
        echo -e "${BLUE}Environment:${NC} $(detect_environment)"
        echo ""
        read -p "Enter your choice: " choice
        
        case $choice in
            1) clear; show_dotfiles_help; read -p "Press Enter to continue..." ;;
            2) clear; show_nvim_help; read -p "Press Enter to continue..." ;;
            3) clear; show_tmux_help; read -p "Press Enter to continue..." ;;
            4) clear; show_shells_help; read -p "Press Enter to continue..." ;;
            5) clear; show_git_help; read -p "Press Enter to continue..." ;;
            6) clear; show_docker_help; read -p "Press Enter to continue..." ;;
            7) clear; show_shortcuts_help; read -p "Press Enter to continue..." ;;
            q|Q) clear; return 0 ;;
            *) echo "Invalid choice. Press Enter to try again..."; read ;;
        esac
    done
}

show_help() {
    echo -e "${CYAN}üìö Dotfiles Documentation System${NC}"
    echo ""
    echo -e "${GREEN}Available topics:${NC}"
    echo -e "  ${YELLOW}dotfiles${NC}    - Dotfiles management commands and structure"
    echo -e "  ${YELLOW}nvim${NC}        - Neovim configuration and shortcuts"
    echo -e "  ${YELLOW}tmux${NC}        - Tmux shortcuts and configuration"
    echo -e "  ${YELLOW}shells${NC}      - Shell functions, aliases, and features"
    echo -e "  ${YELLOW}git${NC}         - Git aliases and workflows"
    echo -e "  ${YELLOW}docker${NC}      - Docker and container shortcuts"
    echo -e "  ${YELLOW}shortcuts${NC}   - All keyboard shortcuts and hotkeys"
    echo ""
    echo -e "${BLUE}Usage:${NC} ? [topic]"
    echo -e "${BLUE}Example:${NC} ? nvim"
    echo ""
}

show_dotfiles_help() {
    echo -e "${CYAN}üîß Dotfiles Management${NC}"
    echo ""
    echo -e "${GREEN}Core Commands:${NC}"
    echo "  ./dotfiles status       - Show current dotfiles status"
    echo "  ./dotfiles doctor       - Run system diagnostics"
    echo "  ./dotfiles sync         - Sync with remote repository"
    echo "  ./dotfiles backup       - Create backup"
    echo "  ./dotfiles clean        - Clean broken symlinks"
    echo ""
    echo -e "${GREEN}Installation:${NC}"
    echo "  ./install/install.sh                    - Interactive installation"
    echo "  ./install/install.sh --profile development --dry-run"
    echo ""
    echo -e "${GREEN}Adding Files:${NC}"
    echo "  ./dotfiles add ~/.vimrc  - Add file to dotfiles management"
    echo ""
    echo -e "${GREEN}Secret Management:${NC}"
    echo "  ./dotfiles secrets init  - Initialize secret management"
    echo "  ./dotfiles secrets add GITHUB_TOKEN"
    echo ""
    echo -e "${GREEN}Structure:${NC}"
    echo "  config/shells/          - Shell configurations"
    echo "  config/apps/            - Application configs"
    echo "  scripts/bin/            - Utility scripts"
    echo "  system/                 - Core system libraries"
    echo ""
}

show_nvim_help() {
    echo -e "${CYAN}‚úèÔ∏è  Neovim Configuration${NC}"
    echo ""
    echo -e "${GREEN}Quick Access:${NC}"
    echo "  v, vi, vim              - Open nvim"
    echo "  nvim                    - Direct nvim command"
    echo ""
    echo -e "${GREEN}Key Bindings (if configured):${NC}"
    echo "  <leader>                - Usually space or comma"
    echo "  :e filename             - Edit file"
    echo "  :w                      - Save file"
    echo "  :q                      - Quit"
    echo "  :wq or :x               - Save and quit"
    echo ""
    echo -e "${GREEN}Configuration Location:${NC}"
    echo "  ~/.config/nvim/         - Nvim configuration directory"
    echo "  ~/.dotfiles/config/apps/nvim/ - Dotfiles nvim config"
    echo ""
    echo -e "${BLUE}Note:${NC} Using AppImage: ~/nvim-linux-x86_64.appimage"
    echo ""
}

show_tmux_help() {
    echo -e "${CYAN}üñ•Ô∏è  Tmux Configuration${NC}"
    echo ""
    echo -e "${GREEN}Session Management:${NC}"
    echo "  tmux                    - Start new session"
    echo "  tmux attach             - Attach to existing session"
    echo "  tmux attach -t main     - Attach to 'main' session"
    echo "  tmux new -s name        - Create named session"
    echo ""
    echo -e "${GREEN}Key Bindings (Ctrl-b prefix):${NC}"
    echo "  Ctrl-b c                - Create new window"
    echo "  Ctrl-b n                - Next window"
    echo "  Ctrl-b p                - Previous window"
    echo "  Ctrl-b %                - Split vertically"
    echo "  Ctrl-b \"                - Split horizontally"
    echo "  Ctrl-b d                - Detach session"
    echo ""
    echo -e "${GREEN}Configuration:${NC}"
    echo "  ~/.tmux.conf            - Tmux configuration file"
    echo "  ~/.dotfiles/config/apps/tmux/ - Dotfiles tmux config"
    echo ""
}

show_shells_help() {
    echo -e "${CYAN}üêö Shell Functions & Aliases${NC}"
    echo ""
    echo -e "${GREEN}Useful Functions:${NC}"
    echo "  mkcd directory          - Create and enter directory"
    echo "  up [N]                  - Go up N directories (default 1)"
    echo "  extract archive         - Smart archive extraction"
    echo ""
    echo -e "${GREEN}Directory Navigation:${NC}"
    echo "  ..                      - cd .."
    echo "  ...                     - cd ../.."
    echo "  ....                    - cd ../../.."
    echo "  ll                      - ls -lah (detailed list)"
    echo "  la                      - ls -A (show hidden)"
    echo "  l                       - ls -CF (classified)"
    echo ""
    echo -e "${GREEN}System Info:${NC}"
    echo "  df                      - df -h (disk usage)"
    echo "  du                      - du -h (directory usage)"
    echo "  free                    - free -h (memory usage)"
    echo ""
    echo -e "${GREEN}Editor:${NC}"
    echo "  v, vi, vim              - Open nvim"
    echo ""
}

show_git_help() {
    echo -e "${CYAN}üì¶ Git Shortcuts${NC}"
    echo ""
    echo -e "${GREEN}Basic Commands:${NC}"
    echo "  g                       - git"
    echo "  gst                     - git status"
    echo "  ga                      - git add"
    echo "  gc                      - git commit"
    echo "  gp                      - git push"
    echo "  gl                      - git pull"
    echo "  gd                      - git diff"
    echo ""
    echo -e "${GREEN}Branch Management:${NC}"
    echo "  gb                      - git branch"
    echo "  gco                     - git checkout"
    echo ""
    echo -e "${GREEN}History:${NC}"
    echo "  glog                    - git log --oneline --graph --decorate"
    echo ""
}

show_docker_help() {
    echo -e "${CYAN}üê≥ Docker Shortcuts${NC}"
    echo ""
    echo -e "${GREEN}Docker Compose:${NC}"
    echo "  dc                      - docker compose"
    echo "  dc up                   - Start services"
    echo "  dc down                 - Stop services"
    echo "  dc logs                 - View logs"
    echo ""
    echo -e "${GREEN}Docker Commands:${NC}"
    echo "  dps                     - docker ps (running containers)"
    echo "  docker images           - List images"
    echo ""
    echo -e "${GREEN}Kubernetes (if available):${NC}"
    echo "  k                       - kubectl"
    echo ""
}

show_shortcuts_help() {
    echo -e "${CYAN}‚å®Ô∏è  All Shortcuts & Hotkeys${NC}"
    echo ""
    echo -e "${GREEN}Shell Prompt Shortcuts:${NC}"
    echo "  Ctrl+R                  - Search history (with fzf if available)"
    echo "  Tab                     - Auto-complete (enhanced in all shells)"
    echo "  Shift+Tab               - Reverse auto-complete"
    echo ""
    echo -e "${GREEN}FZF (if installed):${NC}"
    echo "  Ctrl+T                  - File finder"
    echo "  Ctrl+R                  - Command history search"
    echo ""
    echo -e "${GREEN}Tmux (Ctrl+b prefix):${NC}"
    echo "  See: ? tmux"
    echo ""
    echo -e "${GREEN}Git & Development:${NC}"
    echo "  See: ? git"
    echo ""
}

# Environment detection
detect_environment() {
    local env_info=""
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if grep -q Microsoft /proc/version 2>/dev/null; then
            env_info="${env_info}WSL2 "
        else
            env_info="${env_info}Linux "
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        env_info="${env_info}macOS "
    fi
    
    # Detect current shell
    env_info="${env_info}($(basename "$SHELL"))"
    
    echo "$env_info"
}

main() {
    local topic="${1:-}"
    
    if [[ -z "$topic" ]]; then
        # Check if we're in an interactive terminal
        if [[ -t 0 && -t 1 ]]; then
            show_menu
        else
            show_help
            echo -e "${BLUE}Environment:${NC} $(detect_environment)"
            echo ""
        fi
        return
    fi
    
    case "$topic" in
        "dotfiles"|"dot")
            show_dotfiles_help
            ;;
        "nvim"|"vim"|"neovim")
            show_nvim_help
            ;;
        "tmux")
            show_tmux_help
            ;;
        "shells"|"shell"|"bash"|"zsh"|"fish")
            show_shells_help
            ;;
        "git")
            show_git_help
            ;;
        "docker"|"containers")
            show_docker_help
            ;;
        "shortcuts"|"keys"|"hotkeys")
            show_shortcuts_help
            ;;
        *)
            echo -e "${RED}Unknown topic: $topic${NC}"
            echo ""
            show_help
            return 1
            ;;
    esac
}

main "$@"